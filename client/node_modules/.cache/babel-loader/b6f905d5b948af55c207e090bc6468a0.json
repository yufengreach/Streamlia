{"ast":null,"code":"import _objectSpread from \"/Users/yufengliureach/projects/streams/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAM, FETCH_STREAMS, DELETE_STREAM, EDIT_STREAM } from './types';\nimport history from '../history';\nimport streams from '../apis/streams';\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n};\nexport const createStream = formValues => async (dispatch, getState) => {\n  const userId = getState().auth.userId;\n  const response = await streams.post('/streams', _objectSpread({}, formValues, {\n    userId\n  }));\n  dispatch({\n    type: CREATE_STREAM,\n    payload: response.data\n  }); //Do some programmatic navigation to get the user back to the root route\n\n  history.push('/');\n};\nexport const fetchStreams = () => async dispatch => {\n  const response = await streams.get('/streams');\n  dispatch({\n    type: FETCH_STREAMS,\n    payload: response.data\n  });\n};\nexport const fetchStream = id => async dispatch => {\n  const response = await streams.get(\"/streams/\".concat(id));\n  dispatch({\n    type: FETCH_STREAM,\n    payload: response.data\n  });\n};\nexport const editStream = (id, formValues) => async dispatch => {\n  const response = await streams.patch(\"/streams/\".concat(id), formValues);\n  dispatch({\n    type: EDIT_STREAM,\n    payload: response.data\n  });\n  history.push('/');\n};\nexport const deleteStream = id => async dispatch => {\n  await streams.delete(\"/streams/\".concat(id));\n  dispatch({\n    type: DELETE_STREAM,\n    payload: id\n  });\n  history.push('/');\n};","map":{"version":3,"sources":["/Users/yufengliureach/projects/streams/client/src/actions/index.js"],"names":["SIGN_IN","SIGN_OUT","CREATE_STREAM","FETCH_STREAM","FETCH_STREAMS","DELETE_STREAM","EDIT_STREAM","history","streams","signIn","userId","type","payload","signOut","createStream","formValues","dispatch","getState","auth","response","post","data","push","fetchStreams","get","fetchStream","id","editStream","patch","deleteStream","delete"],"mappings":";AAAA,SAASA,OAAT,EAAkBC,QAAlB,EAA4BC,aAA5B,EAA2CC,YAA3C,EAAyDC,aAAzD,EAAwEC,aAAxE,EAAuFC,WAAvF,QAA0G,SAA1G;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AAEA,OAAO,MAAMC,MAAM,GAAIC,MAAD,IAAY;AAC9B,SAAO;AACHC,IAAAA,IAAI,EAAEX,OADH;AAEHY,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,MAAMG,OAAO,GAAG,MAAM;AACzB,SAAO;AACHF,IAAAA,IAAI,EAAEV;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMa,YAAY,GAAGC,UAAU,IAAK,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAAA,QAC9DP,MAD8D,GACpDO,QAAQ,GAAGC,IADyC,CAC9DR,MAD8D;AAErE,QAAMS,QAAQ,GAAG,MAAMX,OAAO,CAACY,IAAR,CAAa,UAAb,oBAA6BL,UAA7B;AAAyCL,IAAAA;AAAzC,KAAvB;AACAM,EAAAA,QAAQ,CAAC;AAACL,IAAAA,IAAI,EAAET,aAAP;AAAsBU,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAxC,GAAD,CAAR,CAHqE,CAIrE;;AACAd,EAAAA,OAAO,CAACe,IAAR,CAAa,GAAb;AACH,CANM;AAQP,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAMP,QAAN,IAAkB;AAChD,QAAMG,QAAQ,GAAG,MAAMX,OAAO,CAACgB,GAAR,CAAY,UAAZ,CAAvB;AAEAR,EAAAA,QAAQ,CAAC;AAACL,IAAAA,IAAI,EAAEP,aAAP;AAAsBQ,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAxC,GAAD,CAAR;AACH,CAJM;AAMP,OAAO,MAAMI,WAAW,GAAIC,EAAD,IAAQ,MAAMV,QAAN,IAAkB;AACjD,QAAMG,QAAQ,GAAG,MAAMX,OAAO,CAACgB,GAAR,oBAAwBE,EAAxB,EAAvB;AAEAV,EAAAA,QAAQ,CAAC;AAACL,IAAAA,IAAI,EAAER,YAAP;AAAqBS,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAvC,GAAD,CAAR;AACH,CAJM;AAMP,OAAO,MAAMM,UAAU,GAAG,CAACD,EAAD,EAAKX,UAAL,KAAoB,MAAMC,QAAN,IAAkB;AAC5D,QAAMG,QAAQ,GAAG,MAAMX,OAAO,CAACoB,KAAR,oBAA0BF,EAA1B,GAAgCX,UAAhC,CAAvB;AAEAC,EAAAA,QAAQ,CAAC;AAACL,IAAAA,IAAI,EAAEL,WAAP;AAAoBM,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAtC,GAAD,CAAR;AACAd,EAAAA,OAAO,CAACe,IAAR,CAAa,GAAb;AACH,CALM;AAOP,OAAO,MAAMO,YAAY,GAAIH,EAAD,IAAQ,MAAMV,QAAN,IAAkB;AAClD,QAAMR,OAAO,CAACsB,MAAR,oBAA2BJ,EAA3B,EAAN;AAEAV,EAAAA,QAAQ,CAAC;AAACL,IAAAA,IAAI,EAAEN,aAAP;AAAsBO,IAAAA,OAAO,EAAEc;AAA/B,GAAD,CAAR;AACAnB,EAAAA,OAAO,CAACe,IAAR,CAAa,GAAb;AACH,CALM","sourcesContent":["import { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAM, FETCH_STREAMS, DELETE_STREAM, EDIT_STREAM } from './types';\nimport history from '../history';\nimport streams from '../apis/streams';\n\nexport const signIn = (userId) => {\n    return {\n        type: SIGN_IN,\n        payload: userId\n    };\n};\n\nexport const signOut = () => {\n    return {\n        type: SIGN_OUT\n    };\n};\n\nexport const createStream = formValues =>  async (dispatch, getState) => {\n    const {userId} = getState().auth;\n    const response = await streams.post('/streams', {...formValues, userId});\n    dispatch({type: CREATE_STREAM, payload: response.data});\n    //Do some programmatic navigation to get the user back to the root route\n    history.push('/');\n};\n\nexport const fetchStreams = () => async dispatch => {\n    const response = await streams.get('/streams');\n\n    dispatch({type: FETCH_STREAMS, payload: response.data});\n};\n\nexport const fetchStream = (id) => async dispatch => {\n    const response = await streams.get(`/streams/${id}`);\n\n    dispatch({type: FETCH_STREAM, payload: response.data});\n};\n\nexport const editStream = (id, formValues) => async dispatch => {\n    const response = await streams.patch(`/streams/${id}`, formValues);\n\n    dispatch({type: EDIT_STREAM, payload: response.data});\n    history.push('/');\n};\n\nexport const deleteStream = (id) => async dispatch => {\n    await streams.delete(`/streams/${id}`);\n\n    dispatch({type: DELETE_STREAM, payload: id});\n    history.push('/');\n};"]},"metadata":{},"sourceType":"module"}