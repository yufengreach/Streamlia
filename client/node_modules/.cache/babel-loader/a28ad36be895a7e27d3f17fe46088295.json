{"ast":null,"code":"var _jsxFileName = \"/Users/yufengliureach/projects/streams/client/src/components/streams/StreamForm.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      //console.log(meta);\n      //console.log(formProps);\n      //return <input onChange={formProps.input.onChange} value={formProps.input.value} />;\n      const className = \"field \".concat(meta.error && meta.touched ? 'error' : '');\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      })), this.renderError(meta));\n    };\n\n    this.onSubmit = formValues => {\n      //event.preventDefault();\n      //console.log(formValues);\n      //this.props.createStream(formValues);\n      this.props.onSubmit(formValues);\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return React.createElement(\"div\", {\n        className: \"ui error message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }, error));\n    }\n  }\n\n  render() {\n    //console.log(this.props);\n    return React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Enter Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Enter Description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must enter a title';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'You must enter a description';\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamForm',\n  validate\n})(StreamForm); // export default connect()(reduxForm({\n//     form: 'streamCreate',\n//     validate: validate\n// })(StreamCreate));\n// const formWrapped = reduxForm({\n//     form: 'streamCreate',\n//     validate\n// })(StreamCreate);\n// export default connect(null, {createStream})(formWrapped);","map":{"version":3,"sources":["/Users/yufengliureach/projects/streams/client/src/components/streams/StreamForm.js"],"names":["React","Field","reduxForm","StreamForm","Component","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","formValues","props","render","handleSubmit","validate","errors","title","description","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAeC,SAAf,QAA+B,YAA/B;;AAEA,MAAMC,UAAN,SAAyBH,KAAK,CAACI,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SAWrCC,WAXqC,GAWxB,CAAC;AAACC,MAAAA,KAAD;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAAD,KAA0B;AACnC;AACA;AACA;AACA,YAAMC,SAAS,mBAAWD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,OAAnB,GAA4B,OAA5B,GAAqC,EAAhD,CAAf;AACA,aACI;AAAK,QAAA,SAAS,EAAEF,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQF,KAAR,CADF,EAEE,+CAAWD,KAAX;AAAkB,QAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,EAGG,KAAKM,WAAL,CAAiBJ,IAAjB,CAHH,CADJ;AAQH,KAxBoC;;AAAA,SA0BrCK,QA1BqC,GA0BzBC,UAAD,IAAgB;AACvB;AACA;AACA;AACA,WAAKC,KAAL,CAAWF,QAAX,CAAoBC,UAApB;AACH,KA/BoC;AAAA;;AACrCF,EAAAA,WAAW,CAAC;AAACF,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAD,EAAmB;AAC1B,QAAIA,OAAO,IAAID,KAAf,EAAsB;AAClB,aACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyBA,KAAzB,CADF,CADJ;AAKH;AACJ;;AAwBDM,EAAAA,MAAM,GAAG;AACL;AACA,WACE;AAAM,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWE,YAAX,CAAwB,KAAKJ,QAA7B,CAAhB;AAAwD,MAAA,SAAS,EAAC,eAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAE,KAAKR,WAApC;AAAiD,MAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,aAAZ;AAA0B,MAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,MAAA,KAAK,EAAC,mBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,CADF;AAOH;;AA1CoC;;AA8CzC,MAAMa,QAAQ,GAAIJ,UAAD,IAAgB;AAC7B,QAAMK,MAAM,GAAG,EAAf;;AACA,MAAI,CAACL,UAAU,CAACM,KAAhB,EAAuB;AACnBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACH;;AAED,MAAI,CAACN,UAAU,CAACO,WAAhB,EAA6B;AACzBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACH;;AAED,SAAOF,MAAP;AAEH,CAZD;;AAcA,eAAejB,SAAS,CAAC;AACrBoB,EAAAA,IAAI,EAAE,YADe;AAErBJ,EAAAA;AAFqB,CAAD,CAAT,CAGZf,UAHY,CAAf,C,CAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA","sourcesContent":["import React from 'react';\nimport {Field, reduxForm} from 'redux-form';\n\nclass StreamForm extends React.Component {\n    renderError({error, touched}) {\n        if (touched && error) {\n            return (\n                <div className=\"ui error message\">\n                  <div className=\"header\">{error}</div>\n                </div>\n            );\n        }\n    }\n    \n    renderInput= ({input, label, meta}) => {\n        //console.log(meta);\n        //console.log(formProps);\n        //return <input onChange={formProps.input.onChange} value={formProps.input.value} />;\n        const className= `field ${meta.error && meta.touched? 'error': ''}`\n        return (\n            <div className={className}>\n              <label>{label}</label>\n              <input {...input} autoComplete=\"off\" />\n              {this.renderError(meta)}\n            </div>\n        \n        );\n    }\n\n    onSubmit = (formValues) => {\n        //event.preventDefault();\n        //console.log(formValues);\n        //this.props.createStream(formValues);\n        this.props.onSubmit(formValues);\n    }\n\n    render() {\n        //console.log(this.props);\n        return (\n          <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\n              <Field name=\"title\" component={this.renderInput} label=\"Enter Title\" />\n              <Field name=\"description\" component={this.renderInput} label=\"Enter Description\"/>\n              <button className=\"ui button primary\">Submit</button>\n          </form>\n        );\n    }\n    \n}\n\nconst validate = (formValues) => {\n    const errors = {};\n    if (!formValues.title) {\n        errors.title = 'You must enter a title';\n    } \n\n    if (!formValues.description) {\n        errors.description = 'You must enter a description';\n    }\n\n    return errors;\n\n};\n\nexport default reduxForm({\n    form: 'streamForm',\n    validate\n})(StreamForm);\n\n\n\n// export default connect()(reduxForm({\n//     form: 'streamCreate',\n//     validate: validate\n// })(StreamCreate));\n\n// const formWrapped = reduxForm({\n//     form: 'streamCreate',\n//     validate\n// })(StreamCreate);\n\n// export default connect(null, {createStream})(formWrapped);"]},"metadata":{},"sourceType":"module"}